[{"D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\index.js":"1","D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\reportWebVitals.js":"2","D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\App.js":"3","D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\constants.js":"4","D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\stores\\stateRestart.js":"5","D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\actions\\state.js":"6","D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\actions\\levels.js":"7","D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\stores\\stateGameover.js":"8","D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\components\\Menu\\index.js":"9","D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\components\\Board\\index.js":"10","D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\components\\MenuApp\\index.js":"11","D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\stores\\levels.js":"12","D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\components\\MenuApp\\BombCounter\\index.js":"13","D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\components\\MenuApp\\Timer\\index.js":"14","D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\components\\MenuApp\\RestartButton\\index.js":"15","D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\components\\Cell\\index.js":"16"},{"size":500,"mtime":1616242424693,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1611415289599,"results":"19","hashOfConfig":"18"},{"size":1367,"mtime":1616258358514,"results":"20","hashOfConfig":"18"},{"size":361,"mtime":1616242424692,"results":"21","hashOfConfig":"18"},{"size":329,"mtime":1616242424697,"results":"22","hashOfConfig":"18"},{"size":457,"mtime":1616242424670,"results":"23","hashOfConfig":"18"},{"size":211,"mtime":1616242424663,"results":"24","hashOfConfig":"18"},{"size":332,"mtime":1616242424695,"results":"25","hashOfConfig":"18"},{"size":736,"mtime":1616263263669,"results":"26","hashOfConfig":"18"},{"size":4366,"mtime":1616258358519,"results":"27","hashOfConfig":"18"},{"size":446,"mtime":1616242424687,"results":"28","hashOfConfig":"18"},{"size":367,"mtime":1616242424695,"results":"29","hashOfConfig":"18"},{"size":585,"mtime":1616242424678,"results":"30","hashOfConfig":"18"},{"size":1737,"mtime":1616265936706,"results":"31","hashOfConfig":"18"},{"size":686,"mtime":1616262639276,"results":"32","hashOfConfig":"18"},{"size":3624,"mtime":1616262639269,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1eo5w9n",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},"D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\index.js",[],["70","71"],"D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\reportWebVitals.js",[],"D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\App.js",["72","73"],"import React, { Component } from 'react'\r\nimport './App.css';\r\nimport Menu from './components/Menu';\r\nimport MenuApp from './components/MenuApp'\r\nimport Board from './components/Board'\r\nimport {Levels} from './constants'\r\nimport stateRestartStore from './stores/stateRestart';\r\nimport stateGameoverStore from './stores/stateGameover';\r\nimport stateActions from './actions/state';\r\nimport levelActions from './actions/levels';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isRestart: false,\r\n      isGameover: false\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.subscribeStateGame();\r\n  }\r\n\r\n  selectLevel = (level) => { \r\n    stateActions.setGameOverState(false);\r\n    stateActions.setRestartState(true);\r\n    levelActions.setLevel(Levels[level]);\r\n  }\r\n  subscribeStateGame() {\r\n    stateGameoverStore.subscribe(() => {\r\n      this.setState({isGameover: stateGameoverStore.getState()})\r\n    })\r\n    stateRestartStore.subscribe(() => {\r\n      this.setState({isRestart: stateRestartStore.getState()})\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let {isRestart, isGameover} = this.state;\r\n    return (\r\n        <div className=\"App\">\r\n          <Menu selectLevel={this.selectLevel} />\r\n          <MenuApp />\r\n          <div>\r\n            <Board />\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\constants.js",[],"D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\stores\\stateRestart.js",[],"D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\actions\\state.js",[],"D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\actions\\levels.js",[],"D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\stores\\stateGameover.js",[],"D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\components\\Menu\\index.js",[],"D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\components\\Board\\index.js",["74","75"],"import React, { Component } from 'react';\r\nimport Cell from \"../Cell\";\r\nimport store from \"../../stores/levels\"\r\nimport \"./style.css\";\r\nimport { Levels } from '../../constants';\r\nimport stateRestartStore from '../../stores/stateRestart';\r\nexport default class Board extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            bombBoard: [],\r\n            board: [],\r\n            level: Levels.SUPEREASY\r\n        }\r\n    }\r\n\r\n    randomBomb(nBomb, nCell) {\r\n        let set = new Set();\r\n        while (set.size != nBomb) {\r\n            let n = Math.floor(Math.random() * nCell);\r\n            set.add(n);\r\n        }\r\n        return Array.from(set);\r\n    }\r\n\r\n    initBombBoard = (nBomb, width, height) => {\r\n        console.log(\"Tao bang: \"+width);\r\n        let bombPosArray = this.randomBomb(nBomb, width * height);\r\n        let bombBoard = Array(height).fill().map(() => Array(width).fill(0));\r\n\r\n        bombPosArray.forEach(bombIdx => {\r\n            let i = Math.floor(bombIdx / width);\r\n            let j = bombIdx % width;\r\n            bombBoard[i][j] = 1;\r\n        })\r\n        return bombBoard;\r\n    }\r\n\r\n    getNNeighborBomb = (matrix) => {\r\n        let n = 0;\r\n        for (let i = 0; i < 8; i++) {\r\n            n += matrix[i];\r\n        }\r\n        return n;\r\n    }\r\n\r\n    getValueBoard = (board, i, j) => {\r\n        let h = board.length;\r\n        let w = (h > 0) ? board[0].length : 0;\r\n\r\n        if (i < 0 || i >= h || j < 0 || j >= w) return 0;\r\n        return board[i][j];\r\n    }\r\n\r\n    findBoard = (bombBoard) => {\r\n        let h = bombBoard.length;\r\n        let w = (h > 0) ? bombBoard[0].length : 0;\r\n\r\n        let resBoard = [];\r\n\r\n        for (let i = 0; i < h; i++) {\r\n            let resRow = [];\r\n            for (let j = 0; j < w; j++) {\r\n                let value = \"\";\r\n                let a = [];\r\n\r\n                if (bombBoard[i][j] === 1) value = \"B\"\r\n                else {\r\n                    a.push(this.getValueBoard(bombBoard, i - 1, j - 1));\r\n                    a.push(this.getValueBoard(bombBoard, i - 1, j));\r\n                    a.push(this.getValueBoard(bombBoard, i - 1, j + 1));\r\n                    a.push(this.getValueBoard(bombBoard, i, j - 1));\r\n                    a.push(this.getValueBoard(bombBoard, i, j + 1));\r\n                    a.push(this.getValueBoard(bombBoard, i + 1, j - 1));\r\n                    a.push(this.getValueBoard(bombBoard, i + 1, j));\r\n                    a.push(this.getValueBoard(bombBoard, i + 1, j + 1));\r\n\r\n                    value = this.getNNeighborBomb(a)\r\n                }\r\n\r\n                resRow.push(value);\r\n            }\r\n            resBoard.push(resRow);\r\n        }\r\n        return resBoard;\r\n    }\r\n\r\n    renderBoard = () => {\r\n        let {board, bombBoard} = this.state;\r\n        console.log(board);\r\n        console.log(\"render board\");\r\n        return (\r\n            board.map((row, i) => {\r\n                return row.map((cell, j) => \r\n                <Cell i={i} j={j} key={i+'_'+j} className=\"cell\" nBomb={cell} isBomb={bombBoard[i][j]}/>)\r\n            })\r\n        )\r\n    }\r\n    getEmptyBoard = () => {\r\n        return {bombBoard: [], board: []}\r\n    }\r\n    restartGame = (level) => {\r\n        console.log(\"restart game\");\r\n        if (!level) level = this.state.level;\r\n        // Get level from store\r\n        \r\n        \r\n        let bombBoard = this.initBombBoard(level.nBomb, level.width, level.height);\r\n        let board = this.findBoard(bombBoard);\r\n        console.log(\"**\", bombBoard)\r\n        this.setState({\r\n            level: level,\r\n            bombBoard: bombBoard,\r\n            board: board\r\n        })\r\n    }\r\n    componentDidMount() {\r\n        store.subscribe(() => {\r\n            console.log(\"store level changed\");\r\n            let level = store.getState()\r\n            this.restartGame(level);\r\n        })\r\n        stateRestartStore.subscribe(() => {\r\n            console.log(\"store restart changed\");\r\n            if (stateRestartStore.getState())\r\n                this.restartGame();\r\n        })\r\n        this.restartGame(this.state.level);\r\n    }\r\n\r\n\r\n    render() {\r\n        let { board, bombBoard } = this.state;\r\n        let h = board.length;\r\n        let w = (h > 0) ? board[0].length : 0;\r\n        let boardStyle = {\r\n            gridTemplateColumns: `repeat(${w}, auto)`,\r\n            gridTemplateRows: `repeat(${h}, auto)`\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"board\" style={boardStyle}>\r\n                    {this.renderBoard()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\components\\MenuApp\\index.js",[],"D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\stores\\levels.js",[],"D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\components\\MenuApp\\BombCounter\\index.js",[],"D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\components\\MenuApp\\Timer\\index.js",["76"],"D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\components\\MenuApp\\RestartButton\\index.js",[],"D:\\Project\\ReactJS\\Game\\Minesweeper\\src\\components\\Cell\\index.js",["77"],"import React, { Component } from 'react';\r\nimport stateActions from '../../actions/state';\r\nimport stateGameoverStore from \"../../stores/stateGameover\";\r\nimport stateRestartStore from '../../stores/stateRestart';\r\nimport './style.css';\r\nexport class Cell extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nBomb: this.props.nBomb,\r\n            isBomb: this.props.isBomb,\r\n            isFlag: false,\r\n            isOpened: this.props.isOpened || false,\r\n\r\n            content: \"_\",\r\n        }\r\n    }\r\n\r\n    onGame = () => {\r\n        let { isOpened } = this.state;\r\n\r\n        if (!isOpened) {\r\n            this.onCloseHandler();\r\n        }\r\n        else {\r\n            this.onOpenHandler();\r\n        }\r\n    }\r\n\r\n    onCloseHandler = () => {\r\n        this.setState({ content: \"_\" });\r\n    }\r\n\r\n    onOpenHandler = () => {\r\n        let { isBomb, nBomb } = this.state;\r\n\r\n        if (isBomb) {\r\n            stateActions.setGameOverState(true);\r\n            this.onFinishHandler();\r\n        }\r\n        else {\r\n            this.setState({ content: nBomb });\r\n        }\r\n    }\r\n\r\n    onFinishHandler = () => {\r\n        let { isBomb, nBomb, isOpened, isFlag } = this.state;\r\n        // Case Lose:\r\n        let content = \"_\";\r\n        if (!isBomb) {\r\n            content = nBomb;\r\n            if (isFlag) {\r\n                content = \"M\";\r\n            }\r\n        } else {\r\n            // Click boom\r\n            content = \"*\";\r\n        }\r\n        console.log(content);\r\n        this.setState({ content: content });\r\n    }\r\n    //*************** */\r\n    // User actions\r\n    //************** */\r\n    openCell = () => {\r\n        if (this.state.isOpened) return;\r\n        if (stateGameoverStore.getState()) return;\r\n        console.log(\"Open cell\");\r\n        this.setState({ isOpened: true });\r\n        this.onOpenHandler();\r\n    }\r\n    toggleFlag = () => {\r\n        this.setState({ isFlag: !this.state.isFlag });\r\n    }\r\n    flagCell = (e) => {\r\n        e.preventDefault(); // Prevent open context menu\r\n        if (this.state.isOpened) return;\r\n        this.toggleFlag();\r\n        this.onGame();\r\n    }\r\n    componentWillUpdate(nextProps, abc, a1, b1) {\r\n        if (this.state.isFlag) {\r\n            this.setState({ isFlag: false });\r\n        }\r\n\r\n        if (nextProps !== this.props) {\r\n            this.setState({ ...nextProps })\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        stateGameoverStore.subscribe(() => {\r\n            console.log(stateGameoverStore.getState())\r\n            this.onFinishHandler();\r\n            this.setState({ isOpened: stateGameoverStore.getState() });\r\n        })\r\n        stateRestartStore.subscribe(() => {\r\n            console.log(\"sss\")\r\n            this.setState({isOpened: false, content: \"_\"});\r\n        })\r\n    }\r\n    contentHandler() {\r\n\r\n    }\r\n    render() {\r\n        let { content, isOpened, isFlag } = this.state;\r\n        if (!isOpened) {\r\n            content = isFlag? \"F\": \"_\";\r\n        }\r\n        return (\r\n            <div>\r\n                <div\r\n                    className=\"cell\"\r\n                    onClick={this.openCell}\r\n                    onContextMenu={this.flagCell}>\r\n                    <span>{content}</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cell\r\n",{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":39,"column":10,"nodeType":"84","messageId":"85","endLine":39,"endColumn":19},{"ruleId":"82","severity":1,"message":"86","line":39,"column":21,"nodeType":"84","messageId":"85","endLine":39,"endColumn":31},{"ruleId":"87","severity":1,"message":"88","line":19,"column":25,"nodeType":"89","messageId":"90","endLine":19,"endColumn":27},{"ruleId":"82","severity":1,"message":"91","line":127,"column":22,"nodeType":"84","messageId":"85","endLine":127,"endColumn":31},{"ruleId":"82","severity":1,"message":"92","line":2,"column":8,"nodeType":"84","messageId":"85","endLine":2,"endColumn":26},{"ruleId":"82","severity":1,"message":"93","line":56,"column":30,"nodeType":"84","messageId":"85","endLine":56,"endColumn":38},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'isRestart' is assigned a value but never used.","Identifier","unusedVar","'isGameover' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'bombBoard' is assigned a value but never used.","'stateGameoverStore' is defined but never used.","'isOpened' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]